What is dataflow?
Your program at a very abstract level, is something that takes in data and outputs data. 
By dataflow I am talking about the steps data takes from the moment it enters a program to the moment it leaves the program.
It is essentially how data flows through the control flow graph (CFG) of your program.

Why not OOP?

Object Oriented Programming revolves around how to structure entities. 

But the important thing to note here is that how you structure entities isn't really the hardest problem in programming. 

What is the really hard problem in programming? It is managing your control flow graph from getting too complex.
All codebases will tend towards complexity as the functionality of the program increases, there usually is less tendency for the complexity of your entities to increase, 
therefore the most important thing to control really is the CFG. 

Mutable state can get increasingly hard to managage, once again this can be blamed on the programmer, but a good paradigm should stop yourself from shooting yourself in the foot.
 
 Why is this important? Because readiblity of code is critical. This is where OOP really goes wrong, its tendency to favour abstractions, increase the complexity of the control flow graph. Additionally OOP
 code doesn't enforce any restrictions on your data flow as well, which is powerful but it makes it easier to write bugs. OOP doesn't impose any restrictions on the developer
 writing code that essentialy functions as a global GOTO. Once again this could be blamed on the developer, as I've said before a good paradigm should prevent that in my opinion.  

 OOP's promise of hiding implementation details is not a good one in a system where mutable state is present. We can't really be completely sure about what the code will do, any developer is free to change code 
 and may not satisfy our assumptions about that implementation we still have to go and read the code just to be sure of what the code is doing. 
 This isn't always true, if you have a type system that enforces contracts (Design by Contract, also see the Eiffel programming language) I think OOP would fare better here, but it still doesn't prevent every possible scenario. 

 It tends to favour writing more and more abstractions. I've seen the arguement that this just the developers fault, but a good paradigm can't just outsource blame.

 It is easier and cleaner to repeat yourself than write abstractions. 



 But I want polymorphism?
 You can have polymorphism without OOP

 But I want reusability?
 You can have reusability through composition. 

 But I want encapsulation?
 You can still encapsulate your data together for example Records in Haskell, 
 structs in C. Just keep the functions seperate. 

 But I want inheritance?



 What is better than OOP?
 Procedueral Programming has its own problems but OOP isn't immune from these issues either, this is why in my opinion Procedueral Programming can be 
 better than OOP, simply because it reduces the number of problems a language has. 

 Functional Programming is better than both Procedueral Programming and OOP in my opinion simply because it controls very explicitly the complexity of your control flow graph. 
 Your data flows through the CFG in a very linear fashion, this. It isn't perfect, it can be awkward or even impossible to model some imperative datastructures here, and even when there are 
 escape hatches, they are awkward to use. If your FP language is mathematically proveable to have certain properties, the compiler can exploit those properties to generate more efficient code additionally the 
 type system may allow for more expressive programming.




 I think choosing the FP or OOP route is probably dependant on what grows in complexity more. Are your entities complex? Then 
 perhaps OOP would be better for you. Is the number of entities you have relativily simple and is the only thing increasing the functionality of your program? Then perhaps FP is the right choice for you.


 If any readers feel like there is a problem that is easier to write as an OOP program (apart from the ones I have mentioned above, I happily admit defeat there), please submit it here, I'd be happy to attempt to write a FP variant that may be simpler to understand or admit defeat on the point you 
 are arguing about. 




 ====================================================================

 . Thereâ€™s no objective and open evidence that OOP is better than plain procedural programming.

